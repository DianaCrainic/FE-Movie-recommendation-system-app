@page "/ratings"
@inject IHttpService Http
@inject IAccountService AccountService
@inject AppState AppState
@inject NavigationManager NavigationManager


@if (message != null)
{
    @message
    <br />
}
else
{
    @if (ratings == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (ratings.Count == 0)
        {
            <p>You have no ratings yet</p>
        }
        else
        {
            <h3>My ratings</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Movie</th>
                        <th>Rating</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var rating in ratings)
                    {
                        <tr>
                            <td>@rating.Movie.Title</td>
                            <td>@rating.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}


@code {
    private List<Rating> ratings = new List<Rating>();
    private string message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!AppState.LoggedIn)
            {
                NavigationManager.NavigateTo(PagesConstants.LoginPage);
            }
            else
            {
                ratings = await Http.Get<List<Rating>>($"{APIConstants.RatingsForUserEndpoint}/{AccountService.User.Id}");
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
            StateHasChanged();
        }
    }
}
