@page "/ratings"
@inject IHttpService Http
@inject IAccountService AccountService
@inject AppState AppState
@inject NavigationManager NavigationManager


@if (message != null)
{
    @message
    <br />
}
else
{
    @if (ratings == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <button action="action"
                onclick="window.history.go(-1); return false;"
                type="submit" class="oi oi-arrow-thick-left"
                style="background-color: white; width: 60px; height: 30px; border: none; margin-bottom: 20px">
        </button> 

        @if (ratings.Count == 0)
        {
            <p>You have no ratings yet</p>
        }
        else
        {
            <h3>My ratings</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Movie</th>
                        <th>Rating</th>
                        <th>Update rating</th>
                        <th>Delete rating</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var rating in ratings)
                    {
                    <tr>
                        <td>@rating.Movie.Title</td>
                        <td>@rating.Value</td>
                        <td><span class="oi oi-action-undo" @onclick="() => RedirectToUpdateRating(rating.Movie.Id)"></span></td>
                        <td><span class="oi oi-circle-x" @onclick="() => RedirectToDeleteRating(rating.Movie.Id)"></span></td>

                    </tr>
                    }
                </tbody>
            </table>
        }
    }
}


@code {
    private List<Rating> ratings = new List<Rating>();
    private string message { get; set; }

    private DeleteRatingRequest DeleteRatingRequest = new DeleteRatingRequest();
    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!AppState.LoggedIn)
            {
                NavigationManager.NavigateTo(PagesConstants.LoginPage);
            }
            else
            {
                ratings = await Http.Get<List<Rating>>($"{APIConstants.RatingsForUserEndpoint}/{AccountService.User.Id}");
            }
        }
        catch (Exception ex)
        {
            message = ex.Message;
            StateHasChanged();
        }
    }

    private void RedirectToUpdateRating(int MovieId)
    {
        NavigationManager.NavigateTo($"{PagesConstants.UpdateRatingPage}/{MovieId}");
    }

    private async void RedirectToDeleteRating(int MovieId)
    {

        Loading = true;
        DeleteRatingRequest.MovieId = MovieId;
        DeleteRatingRequest.userId = AccountService.User.Id;

        try
        {
            await Http.Delete(APIConstants.RatingsEndpoint, DeleteRatingRequest);
            NavigationManager.NavigateTo(PagesConstants.HomePage);
        }
        catch (Exception ex)
        {
            message = ex.Message;
            Loading = false;
            StateHasChanged();
        }
    }
}
