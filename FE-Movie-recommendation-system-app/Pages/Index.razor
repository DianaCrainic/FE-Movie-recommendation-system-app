@page "/"
@inject IAccountService AccountService
@inject IHttpService Http
@inject HttpClient HttpClient
@inject AppState AppState
@inject NavigationManager NavigationManager
@using System.Text.Json

<div class="p-4">
    <div class="container">
        @if (@AccountService.User != null)
        {
            <h1>Hi @AccountService.User.Username!</h1>
        }
        else
        {
            <h1>Hi!</h1>
        }
        <p>Welcome to Movie Recommendation System!!</p>
    </div>
</div>

<h2>Movies</h2>


@if (movies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input placeholder="Title" @bind-value="searchTerm" @bind-value:event="oninput" style="font-size: 18px ; margin-top: 20px; margin-bottom: 20px"/>
    <span @onclick="async () => await SelectedPage(1)" class="oi oi-magnifying-glass" style="font-size: 22px"></span>

    <table class="table">
        <thead style="background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%); color:white">
            <tr>
                <th>Title</th>
                <th>Release Year</th>
                <th>Genres</th>
                <th>Actors</th>
                @if (AppState.LoggedIn)
                {
                    <th>Rating</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td style="padding-left:30px;">@movie.ReleaseYear</td>

                    <td>
                        @foreach (var genre in movie.Genres)
                        {
                            <span style="padding:5px">@genre.Name</span>
                        }
                    </td>

                    <td style="padding-left:30px;"><span class="oi oi-people" @onclick="() => RedirectToActors(movie.Id)"></span></td>

                    @if (AppState.LoggedIn)
                    {
                        @if (ratings.Exists(r => r.MovieId == movie.Id))
                        {
                            <td>@ratings.Find(r => r.MovieId == movie.Id).Value</td>
                        }
                        else
                        {
                            <td><span class="oi oi-plus" @onclick="() => RedirectToAddRating(movie.Id)"></span></td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
    <Pagination TotalPages="totalPages" CurrentPage="currentPage" Radius="2" SelectedPage="SelectedPage"></Pagination>
}

@code {
    private List<Movie> movies = new List<Movie>();
    private List<Rating> ratings = new List<Rating>();
    private int totalPages;
    private int currentPage = 1;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();
        if (AppState.LoggedIn)
        {
            ratings = await Http.Get<List<Rating>>($"{APIConstants.RatingsForUserEndpoint}/{AccountService.User.Id}");
        }
    }

    private async Task LoadMovies(int page = 1, int entitiesPerPage = 10)
    {
        string endpoint = $"{APIConstants.MoviesEndpoint}?page={page}&entitiesPerPage={entitiesPerPage}";
        if (searchTerm != "")
        {
            endpoint = $"{endpoint}&title={searchTerm}";
        }
        var response = await HttpClient.GetAsync(endpoint);
        if (response.IsSuccessStatusCode)
        {
            totalPages = int.Parse(response.Headers.GetValues(APIConstants.NumberOfPagesHeader).FirstOrDefault());
            var responseString = await response.Content.ReadAsStringAsync();
            movies = JsonSerializer.Deserialize<List<Movie>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadMovies(page);
    }

    private void RedirectToActors(int MovieId)
    {
        NavigationManager.NavigateTo($"{PagesConstants.ActorsFromMoviePage}/{MovieId}");
    }

    private void RedirectToAddRating(int MovieId)
    {
        NavigationManager.NavigateTo($"{PagesConstants.AddRatingToMoviePage}/{MovieId}");
    }
}