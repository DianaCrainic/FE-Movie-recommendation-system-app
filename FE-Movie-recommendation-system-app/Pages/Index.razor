@page "/"
@inject IAccountService AccountService
@inject IHttpService Http
@inject AppState AppState
@inject NavigationManager NavigationManager

<div class="p-4">
    <div class="container">
        @if (@AccountService.User != null)
        {
            <h1>Hi @AccountService.User.Username!</h1>
        }
        else
        {
            <h1>Hi!</h1>
        }
        <p>Welcome to Movie Recommendation System!!</p>
    </div>
</div>

<h3>Movies</h3>


@if (movies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Release Year</th>
                <th>Movie Genres</th>
                <th>Actors</th>
                @if (AppState.LoggedIn)
                {
                    <th>Rating</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.ReleaseYear</td>

                    <td>
                        @foreach (var genre in movie.Genres)
                        {
                            <span>@genre.Name</span>
                        }
                    </td>

                    <td><span class="oi oi-people" @onclick="() => RedirectToActors(movie.Id)"></span></td>

                    @if (AppState.LoggedIn)
                    {
                        @if (ratings.Exists(r => r.Movie.Id == movie.Id))
                        {
                            <td>@ratings.Find(r => r.Movie.Id == movie.Id).Value</td>
                        }
                        else
                        {
                            <td><span class="oi oi-plus" @onclick="() => RedirectToAddRating(movie.Id)"></span></td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Movie> movies = new List<Movie>();
    private List<Rating> ratings = new List<Rating>();

    protected override async Task OnInitializedAsync()
    {
        movies = await Http.Get<List<Movie>>(APIConstants.MoviesEndpoint);

        if (AppState.LoggedIn)
        {
            ratings = await Http.Get<List<Rating>>($"{APIConstants.RatingsForUserEndpoint}/{AccountService.User.Id}");
        }
    }

    private void RedirectToActors(int MovieId)
    {
        NavigationManager.NavigateTo($"{PagesConstants.ActorsFromMoviePage}/{MovieId}");
    }

    private void RedirectToAddRating(int MovieId)
    {
        NavigationManager.NavigateTo($"{PagesConstants.AddRatingToMoviePage}/{MovieId}");
    }
}

