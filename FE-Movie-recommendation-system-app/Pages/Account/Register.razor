@page "/account/register"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<div class="card">
    <h4 class="card-header">Create a new account</h4>
    <div class="card-body">
        <EditForm Model="@RegisterRequest" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="RegisterRequest.Email" class="form-control" />
                <ValidationMessage For="@(() => RegisterRequest.Email)" />
            </div>
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="RegisterRequest.Username" class="form-control" />
                <ValidationMessage For="@(() => RegisterRequest.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="RegisterRequest.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => RegisterRequest.Password)" />
            </div>
            @if (Message != null)
            {
                @Message <br />
            }
            <button disabled="@Loading" class="btn btn-primary">
                @if (Loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Register
            </button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterRequest RegisterRequest = new RegisterRequest();
    private bool Loading { get; set; }
    private string Message { get; set; }

    private async void OnValidSubmit()
    {
        Loading = true;
        try
        {
            await AccountService.Register(RegisterRequest);
            NavigationManager.NavigateTo("/account/login");
        }
        catch (Exception ex)
        {
            Message = ex.Message;
            Loading = false;
            StateHasChanged();
        }
    }

}
