@page "/account/login"
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject AppState AppState

<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@LoginRequest" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="LoginRequest.Username" class="form-control" />
                <ValidationMessage For="@(() => LoginRequest.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="LoginRequest.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => LoginRequest.Password)" />
            </div>
            @if (Message != null)
            {
                @Message <br />
            }
            <button disabled="@Loading" class="btn btn-primary">
                @if (Loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequest LoginRequest = new LoginRequest();
    private bool Loading { get; set; }
    private string Message { get; set; }

    private async void OnValidSubmit()
    {
        Loading = true;
        try
        {
            await AccountService.Login(LoginRequest);
            AppState.LoggedIn = true;
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Message = ex.Message;
            Loading = false;
            StateHasChanged();
        }
    }
}
